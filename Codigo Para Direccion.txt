import cv2
import numpy as np
from math import atan2,sin,cos

Minarea = 300
bandera = 1
Repeticion = 1
cap = cv2.VideoCapture(0)
momentos_fig = [[  6.24204004e-04,1.56223475e-11,5.30382404e-14,9.37851396e-19,-1.98604162e-34,-2.08566753e-24,-6.56331473e-35], #Circulo
                [  6.52363871e-04,2.63532058e-12,3.36577016e-14,1.10443617e-15,-6.57587931e-30,-7.80682663e-22, 1.44927616e-30], #Cuadrado
                [  1.13676692e-03,7.32140119e-07,5.81808944e-10,1.96608051e-10, 6.62677323e-20, 1.64741261e-13,-5.49881103e-21], #Triangulo
                [  7.55989983e-04,8.73239843e-09,2.66066314e-10,1.16576398e-12, 2.03046585e-23, 1.08102914e-16, 3.04044988e-24], #Triangulo Eq
                [  6.44388014e-04,2.41933011e-08,6.53746288e-14,1.15541384e-15, 5.07841134e-30, 9.27184769e-20,-8.66297908e-30], #Ovalo
                [  6.98627967e-04,6.14085796e-08,1.77513841e-13,5.60684054e-15,-1.76080247e-28,-1.23101659e-18, 1.68640884e-29]] #Rectangulo
momentos_fig = np.transpose(momentos_fig,)
while True:

    # Take each frame
    _, frame = cap.read()

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([0,0,0])
    upper_blue = np.array([170, 156, 129])

    # Threshold the HSV image to get only blue colors
    mask = cv2.inRange(hsv, lower_blue, upper_blue)
    kernel = np.ones((3,3),np.uint8)
    mask = cv2.morphologyEx(mask,cv2.MORPH_OPEN,kernel, iterations = 2)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
    connectivity = 4  
    # Perform the operation
    output = cv2.connectedComponentsWithStats(mask, connectivity, cv2.CV_32S)
    # Get the results
    # The first cell is the number of labels
    num_labels = output[0]
    # The second cell is the label matrix
    labels = output[1]
    # The third cell is the stat matrix
    stats = output[2]
    # The fourth cell is the centroid matrix
    centroids = output[3] 
    #print (num_labels)
    for i in range(1, num_labels):
        x1 = int(stats[i,0])
        y1 = np.int(stats[i,1])
        an1 = np.int(stats[i,2])
        al1 = np.int(stats[i,3])
        B3 = mask[y1:y1+al1, x1:x1+an1]
        principales = cv2.moments(B3)
        momentos = cv2.HuMoments(cv2.moments(B3))    
        distancia = sum(np.power((momentos_fig-momentos),2))
        selector = np.argmin(distancia)
        im2,contours,hierarchy = cv2.findContours(B3, 1, 2)
        cnt = contours[0]
        area = cv2.contourArea(cnt)
        if area >= Minarea:
            #if Repeticion  < 1:
            print("Esta cerca al estante")
                
            #Repeticion = Repeticion+1
            #if Repeticion > 10:
             #   Repeticion = 0
                
            if Repeticion > 0:
                
                if selector == 0:
                            
                    cx = int(principales['m10']/principales['m00'])
                    cy = int(principales['m01']/principales['m00'])
        
                    x=int(principales['mu20']-principales['mu02'])
                    y=int(2*principales['mu11'])
                    orientacion=-0.5*atan2(y,x)
                    x2=int(cx+80*cos(orientacion))
                    y2=int(cy-80*sin(orientacion))
                    cv2.line(frame, (x1+cx,y1+cy), (x1+x2,y1+y2),(0,255,0),2,lineType = 8);

                    grados = 57.3*orientacion
                    grados = grados*bandera
                                

                    print("Gire a la derecha",grados)

                   # print(grados)    
                    
                if selector == 5:
                            
                    cx = int(principales['m10']/principales['m00'])
                    cy = int(principales['m01']/principales['m00'])
        
                    x=int(principales['mu20']-principales['mu02'])
                    y=int(2*principales['mu11'])
                    orientacion=-0.5*atan2(y,x)
                    x2=int(cx+80*cos(orientacion))
                    y2=int(cy-80*sin(orientacion))
                    cv2.line(frame, (x1+cx,y1+cy), (x1+x2,y1+y2),(0,255,0),2,lineType = 8);

                    grados = 57.3*orientacion
                    grados = grados*bandera
                                
                    
                    Aviso = 1
                    print("Gire a la izquierda",grados)

                   
                    
    # Bitwise-AND mask and original image
    res = cv2.bitwise_and(frame,frame, mask= mask)
    cv2.imshow('frame',frame)
    cv2.imshow('mask',mask)
    cv2.imshow('res',res)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cap.release() 
cv2.destroyAllWindows()